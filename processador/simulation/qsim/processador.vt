// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/11/2024 19:50:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_vlg_check_tst (
	ALU_Sel,
	dataOut,
	I_data,
	I_rd,
	RAM_addr,
	RAM_en,
	RAM_rw,
	RAMOut,
	RF_RPaddr,
	RF_Waddr,
	sampler_rx
);
input [1:0] ALU_Sel;
input [7:0] dataOut;
input [15:0] I_data;
input  I_rd;
input [3:0] RAM_addr;
input  RAM_en;
input  RAM_rw;
input [7:0] RAMOut;
input [3:0] RF_RPaddr;
input [3:0] RF_Waddr;
input sampler_rx;

reg [1:0] ALU_Sel_expected;
reg [7:0] dataOut_expected;
reg [15:0] I_data_expected;
reg  I_rd_expected;
reg [3:0] RAM_addr_expected;
reg  RAM_en_expected;
reg  RAM_rw_expected;
reg [7:0] RAMOut_expected;
reg [3:0] RF_RPaddr_expected;
reg [3:0] RF_Waddr_expected;

reg [1:0] ALU_Sel_prev;
reg [7:0] dataOut_prev;
reg [15:0] I_data_prev;
reg  I_rd_prev;
reg [3:0] RAM_addr_prev;
reg  RAM_en_prev;
reg  RAM_rw_prev;
reg [7:0] RAMOut_prev;
reg [3:0] RF_RPaddr_prev;
reg [3:0] RF_Waddr_prev;

reg [1:0] ALU_Sel_expected_prev;
reg [7:0] dataOut_expected_prev;
reg [15:0] I_data_expected_prev;
reg  I_rd_expected_prev;
reg [3:0] RAM_addr_expected_prev;
reg  RAM_en_expected_prev;
reg  RAM_rw_expected_prev;
reg [7:0] RAMOut_expected_prev;
reg [3:0] RF_RPaddr_expected_prev;
reg [3:0] RF_Waddr_expected_prev;

reg [1:0] last_ALU_Sel_exp;
reg [7:0] last_dataOut_exp;
reg [15:0] last_I_data_exp;
reg  last_I_rd_exp;
reg [3:0] last_RAM_addr_exp;
reg  last_RAM_en_exp;
reg  last_RAM_rw_exp;
reg [7:0] last_RAMOut_exp;
reg [3:0] last_RF_RPaddr_exp;
reg [3:0] last_RF_Waddr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_Sel_prev = ALU_Sel;
	dataOut_prev = dataOut;
	I_data_prev = I_data;
	I_rd_prev = I_rd;
	RAM_addr_prev = RAM_addr;
	RAM_en_prev = RAM_en;
	RAM_rw_prev = RAM_rw;
	RAMOut_prev = RAMOut;
	RF_RPaddr_prev = RF_RPaddr;
	RF_Waddr_prev = RF_Waddr;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_Sel_expected_prev = ALU_Sel_expected;
	dataOut_expected_prev = dataOut_expected;
	I_data_expected_prev = I_data_expected;
	I_rd_expected_prev = I_rd_expected;
	RAM_addr_expected_prev = RAM_addr_expected;
	RAM_en_expected_prev = RAM_en_expected;
	RAM_rw_expected_prev = RAM_rw_expected;
	RAMOut_expected_prev = RAMOut_expected;
	RF_RPaddr_expected_prev = RF_RPaddr_expected;
	RF_Waddr_expected_prev = RF_Waddr_expected;
end


// expected ALU_Sel[ 1 ]
initial
begin
	ALU_Sel_expected[1] = 1'bX;
end 
// expected ALU_Sel[ 0 ]
initial
begin
	ALU_Sel_expected[0] = 1'bX;
end 
// expected dataOut[ 7 ]
initial
begin
	dataOut_expected[7] = 1'bX;
end 
// expected dataOut[ 6 ]
initial
begin
	dataOut_expected[6] = 1'bX;
end 
// expected dataOut[ 5 ]
initial
begin
	dataOut_expected[5] = 1'bX;
end 
// expected dataOut[ 4 ]
initial
begin
	dataOut_expected[4] = 1'bX;
end 
// expected dataOut[ 3 ]
initial
begin
	dataOut_expected[3] = 1'bX;
end 
// expected dataOut[ 2 ]
initial
begin
	dataOut_expected[2] = 1'bX;
end 
// expected dataOut[ 1 ]
initial
begin
	dataOut_expected[1] = 1'bX;
end 
// expected dataOut[ 0 ]
initial
begin
	dataOut_expected[0] = 1'bX;
end 
// expected I_data[ 15 ]
initial
begin
	I_data_expected[15] = 1'bX;
end 
// expected I_data[ 14 ]
initial
begin
	I_data_expected[14] = 1'bX;
end 
// expected I_data[ 13 ]
initial
begin
	I_data_expected[13] = 1'bX;
end 
// expected I_data[ 12 ]
initial
begin
	I_data_expected[12] = 1'bX;
end 
// expected I_data[ 11 ]
initial
begin
	I_data_expected[11] = 1'bX;
end 
// expected I_data[ 10 ]
initial
begin
	I_data_expected[10] = 1'bX;
end 
// expected I_data[ 9 ]
initial
begin
	I_data_expected[9] = 1'bX;
end 
// expected I_data[ 8 ]
initial
begin
	I_data_expected[8] = 1'bX;
end 
// expected I_data[ 7 ]
initial
begin
	I_data_expected[7] = 1'bX;
end 
// expected I_data[ 6 ]
initial
begin
	I_data_expected[6] = 1'bX;
end 
// expected I_data[ 5 ]
initial
begin
	I_data_expected[5] = 1'bX;
end 
// expected I_data[ 4 ]
initial
begin
	I_data_expected[4] = 1'bX;
end 
// expected I_data[ 3 ]
initial
begin
	I_data_expected[3] = 1'bX;
end 
// expected I_data[ 2 ]
initial
begin
	I_data_expected[2] = 1'bX;
end 
// expected I_data[ 1 ]
initial
begin
	I_data_expected[1] = 1'bX;
end 
// expected I_data[ 0 ]
initial
begin
	I_data_expected[0] = 1'bX;
end 

// expected I_rd
initial
begin
	I_rd_expected = 1'bX;
end 
// expected RAM_addr[ 3 ]
initial
begin
	RAM_addr_expected[3] = 1'bX;
end 
// expected RAM_addr[ 2 ]
initial
begin
	RAM_addr_expected[2] = 1'bX;
end 
// expected RAM_addr[ 1 ]
initial
begin
	RAM_addr_expected[1] = 1'bX;
end 
// expected RAM_addr[ 0 ]
initial
begin
	RAM_addr_expected[0] = 1'bX;
end 

// expected RAM_en
initial
begin
	RAM_en_expected = 1'bX;
end 

// expected RAM_rw
initial
begin
	RAM_rw_expected = 1'bX;
end 
// expected RAMOut[ 7 ]
initial
begin
	RAMOut_expected[7] = 1'bX;
end 
// expected RAMOut[ 6 ]
initial
begin
	RAMOut_expected[6] = 1'bX;
end 
// expected RAMOut[ 5 ]
initial
begin
	RAMOut_expected[5] = 1'bX;
end 
// expected RAMOut[ 4 ]
initial
begin
	RAMOut_expected[4] = 1'bX;
end 
// expected RAMOut[ 3 ]
initial
begin
	RAMOut_expected[3] = 1'bX;
end 
// expected RAMOut[ 2 ]
initial
begin
	RAMOut_expected[2] = 1'bX;
end 
// expected RAMOut[ 1 ]
initial
begin
	RAMOut_expected[1] = 1'bX;
end 
// expected RAMOut[ 0 ]
initial
begin
	RAMOut_expected[0] = 1'bX;
end 
// expected RF_RPaddr[ 3 ]
initial
begin
	RF_RPaddr_expected[3] = 1'bX;
end 
// expected RF_RPaddr[ 2 ]
initial
begin
	RF_RPaddr_expected[2] = 1'bX;
end 
// expected RF_RPaddr[ 1 ]
initial
begin
	RF_RPaddr_expected[1] = 1'bX;
end 
// expected RF_RPaddr[ 0 ]
initial
begin
	RF_RPaddr_expected[0] = 1'bX;
end 
// expected RF_Waddr[ 3 ]
initial
begin
	RF_Waddr_expected[3] = 1'bX;
end 
// expected RF_Waddr[ 2 ]
initial
begin
	RF_Waddr_expected[2] = 1'bX;
end 
// expected RF_Waddr[ 1 ]
initial
begin
	RF_Waddr_expected[1] = 1'bX;
end 
// expected RF_Waddr[ 0 ]
initial
begin
	RF_Waddr_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_Sel_expected or ALU_Sel or dataOut_expected or dataOut or I_data_expected or I_data or I_rd_expected or I_rd or RAM_addr_expected or RAM_addr or RAM_en_expected or RAM_en or RAM_rw_expected or RAM_rw or RAMOut_expected or RAMOut or RF_RPaddr_expected or RF_RPaddr or RF_Waddr_expected or RF_Waddr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_Sel = %b | expected dataOut = %b | expected I_data = %b | expected I_rd = %b | expected RAM_addr = %b | expected RAM_en = %b | expected RAM_rw = %b | expected RAMOut = %b | expected RF_RPaddr = %b | expected RF_Waddr = %b | ",ALU_Sel_expected_prev,dataOut_expected_prev,I_data_expected_prev,I_rd_expected_prev,RAM_addr_expected_prev,RAM_en_expected_prev,RAM_rw_expected_prev,RAMOut_expected_prev,RF_RPaddr_expected_prev,RF_Waddr_expected_prev);
	$display("| real ALU_Sel = %b | real dataOut = %b | real I_data = %b | real I_rd = %b | real RAM_addr = %b | real RAM_en = %b | real RAM_rw = %b | real RAMOut = %b | real RF_RPaddr = %b | real RF_Waddr = %b | ",ALU_Sel_prev,dataOut_prev,I_data_prev,I_rd_prev,RAM_addr_prev,RAM_en_prev,RAM_rw_prev,RAMOut_prev,RF_RPaddr_prev,RF_Waddr_prev);
`endif
	if (
		( ALU_Sel_expected_prev[0] !== 1'bx ) && ( ALU_Sel_prev[0] !== ALU_Sel_expected_prev[0] )
		&& ((ALU_Sel_expected_prev[0] !== last_ALU_Sel_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Sel_expected_prev);
		$display ("     Real value = %b", ALU_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Sel_exp[0] = ALU_Sel_expected_prev[0];
	end
	if (
		( ALU_Sel_expected_prev[1] !== 1'bx ) && ( ALU_Sel_prev[1] !== ALU_Sel_expected_prev[1] )
		&& ((ALU_Sel_expected_prev[1] !== last_ALU_Sel_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Sel_expected_prev);
		$display ("     Real value = %b", ALU_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Sel_exp[1] = ALU_Sel_expected_prev[1];
	end
	if (
		( dataOut_expected_prev[0] !== 1'bx ) && ( dataOut_prev[0] !== dataOut_expected_prev[0] )
		&& ((dataOut_expected_prev[0] !== last_dataOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[0] = dataOut_expected_prev[0];
	end
	if (
		( dataOut_expected_prev[1] !== 1'bx ) && ( dataOut_prev[1] !== dataOut_expected_prev[1] )
		&& ((dataOut_expected_prev[1] !== last_dataOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[1] = dataOut_expected_prev[1];
	end
	if (
		( dataOut_expected_prev[2] !== 1'bx ) && ( dataOut_prev[2] !== dataOut_expected_prev[2] )
		&& ((dataOut_expected_prev[2] !== last_dataOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[2] = dataOut_expected_prev[2];
	end
	if (
		( dataOut_expected_prev[3] !== 1'bx ) && ( dataOut_prev[3] !== dataOut_expected_prev[3] )
		&& ((dataOut_expected_prev[3] !== last_dataOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[3] = dataOut_expected_prev[3];
	end
	if (
		( dataOut_expected_prev[4] !== 1'bx ) && ( dataOut_prev[4] !== dataOut_expected_prev[4] )
		&& ((dataOut_expected_prev[4] !== last_dataOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[4] = dataOut_expected_prev[4];
	end
	if (
		( dataOut_expected_prev[5] !== 1'bx ) && ( dataOut_prev[5] !== dataOut_expected_prev[5] )
		&& ((dataOut_expected_prev[5] !== last_dataOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[5] = dataOut_expected_prev[5];
	end
	if (
		( dataOut_expected_prev[6] !== 1'bx ) && ( dataOut_prev[6] !== dataOut_expected_prev[6] )
		&& ((dataOut_expected_prev[6] !== last_dataOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[6] = dataOut_expected_prev[6];
	end
	if (
		( dataOut_expected_prev[7] !== 1'bx ) && ( dataOut_prev[7] !== dataOut_expected_prev[7] )
		&& ((dataOut_expected_prev[7] !== last_dataOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dataOut_exp[7] = dataOut_expected_prev[7];
	end
	if (
		( I_data_expected_prev[0] !== 1'bx ) && ( I_data_prev[0] !== I_data_expected_prev[0] )
		&& ((I_data_expected_prev[0] !== last_I_data_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[0] = I_data_expected_prev[0];
	end
	if (
		( I_data_expected_prev[1] !== 1'bx ) && ( I_data_prev[1] !== I_data_expected_prev[1] )
		&& ((I_data_expected_prev[1] !== last_I_data_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[1] = I_data_expected_prev[1];
	end
	if (
		( I_data_expected_prev[2] !== 1'bx ) && ( I_data_prev[2] !== I_data_expected_prev[2] )
		&& ((I_data_expected_prev[2] !== last_I_data_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[2] = I_data_expected_prev[2];
	end
	if (
		( I_data_expected_prev[3] !== 1'bx ) && ( I_data_prev[3] !== I_data_expected_prev[3] )
		&& ((I_data_expected_prev[3] !== last_I_data_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[3] = I_data_expected_prev[3];
	end
	if (
		( I_data_expected_prev[4] !== 1'bx ) && ( I_data_prev[4] !== I_data_expected_prev[4] )
		&& ((I_data_expected_prev[4] !== last_I_data_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[4] = I_data_expected_prev[4];
	end
	if (
		( I_data_expected_prev[5] !== 1'bx ) && ( I_data_prev[5] !== I_data_expected_prev[5] )
		&& ((I_data_expected_prev[5] !== last_I_data_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[5] = I_data_expected_prev[5];
	end
	if (
		( I_data_expected_prev[6] !== 1'bx ) && ( I_data_prev[6] !== I_data_expected_prev[6] )
		&& ((I_data_expected_prev[6] !== last_I_data_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[6] = I_data_expected_prev[6];
	end
	if (
		( I_data_expected_prev[7] !== 1'bx ) && ( I_data_prev[7] !== I_data_expected_prev[7] )
		&& ((I_data_expected_prev[7] !== last_I_data_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[7] = I_data_expected_prev[7];
	end
	if (
		( I_data_expected_prev[8] !== 1'bx ) && ( I_data_prev[8] !== I_data_expected_prev[8] )
		&& ((I_data_expected_prev[8] !== last_I_data_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[8] = I_data_expected_prev[8];
	end
	if (
		( I_data_expected_prev[9] !== 1'bx ) && ( I_data_prev[9] !== I_data_expected_prev[9] )
		&& ((I_data_expected_prev[9] !== last_I_data_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[9] = I_data_expected_prev[9];
	end
	if (
		( I_data_expected_prev[10] !== 1'bx ) && ( I_data_prev[10] !== I_data_expected_prev[10] )
		&& ((I_data_expected_prev[10] !== last_I_data_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[10] = I_data_expected_prev[10];
	end
	if (
		( I_data_expected_prev[11] !== 1'bx ) && ( I_data_prev[11] !== I_data_expected_prev[11] )
		&& ((I_data_expected_prev[11] !== last_I_data_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[11] = I_data_expected_prev[11];
	end
	if (
		( I_data_expected_prev[12] !== 1'bx ) && ( I_data_prev[12] !== I_data_expected_prev[12] )
		&& ((I_data_expected_prev[12] !== last_I_data_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[12] = I_data_expected_prev[12];
	end
	if (
		( I_data_expected_prev[13] !== 1'bx ) && ( I_data_prev[13] !== I_data_expected_prev[13] )
		&& ((I_data_expected_prev[13] !== last_I_data_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[13] = I_data_expected_prev[13];
	end
	if (
		( I_data_expected_prev[14] !== 1'bx ) && ( I_data_prev[14] !== I_data_expected_prev[14] )
		&& ((I_data_expected_prev[14] !== last_I_data_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[14] = I_data_expected_prev[14];
	end
	if (
		( I_data_expected_prev[15] !== 1'bx ) && ( I_data_prev[15] !== I_data_expected_prev[15] )
		&& ((I_data_expected_prev[15] !== last_I_data_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_data_exp[15] = I_data_expected_prev[15];
	end
	if (
		( I_rd_expected_prev !== 1'bx ) && ( I_rd_prev !== I_rd_expected_prev )
		&& ((I_rd_expected_prev !== last_I_rd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_expected_prev);
		$display ("     Real value = %b", I_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_rd_exp = I_rd_expected_prev;
	end
	if (
		( RAM_addr_expected_prev[0] !== 1'bx ) && ( RAM_addr_prev[0] !== RAM_addr_expected_prev[0] )
		&& ((RAM_addr_expected_prev[0] !== last_RAM_addr_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_addr_expected_prev);
		$display ("     Real value = %b", RAM_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RAM_addr_exp[0] = RAM_addr_expected_prev[0];
	end
	if (
		( RAM_addr_expected_prev[1] !== 1'bx ) && ( RAM_addr_prev[1] !== RAM_addr_expected_prev[1] )
		&& ((RAM_addr_expected_prev[1] !== last_RAM_addr_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_addr_expected_prev);
		$display ("     Real value = %b", RAM_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RAM_addr_exp[1] = RAM_addr_expected_prev[1];
	end
	if (
		( RAM_addr_expected_prev[2] !== 1'bx ) && ( RAM_addr_prev[2] !== RAM_addr_expected_prev[2] )
		&& ((RAM_addr_expected_prev[2] !== last_RAM_addr_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_addr_expected_prev);
		$display ("     Real value = %b", RAM_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RAM_addr_exp[2] = RAM_addr_expected_prev[2];
	end
	if (
		( RAM_addr_expected_prev[3] !== 1'bx ) && ( RAM_addr_prev[3] !== RAM_addr_expected_prev[3] )
		&& ((RAM_addr_expected_prev[3] !== last_RAM_addr_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_addr_expected_prev);
		$display ("     Real value = %b", RAM_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RAM_addr_exp[3] = RAM_addr_expected_prev[3];
	end
	if (
		( RAM_en_expected_prev !== 1'bx ) && ( RAM_en_prev !== RAM_en_expected_prev )
		&& ((RAM_en_expected_prev !== last_RAM_en_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_en_expected_prev);
		$display ("     Real value = %b", RAM_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_en_exp = RAM_en_expected_prev;
	end
	if (
		( RAM_rw_expected_prev !== 1'bx ) && ( RAM_rw_prev !== RAM_rw_expected_prev )
		&& ((RAM_rw_expected_prev !== last_RAM_rw_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_rw :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_rw_expected_prev);
		$display ("     Real value = %b", RAM_rw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_rw_exp = RAM_rw_expected_prev;
	end
	if (
		( RAMOut_expected_prev[0] !== 1'bx ) && ( RAMOut_prev[0] !== RAMOut_expected_prev[0] )
		&& ((RAMOut_expected_prev[0] !== last_RAMOut_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[0] = RAMOut_expected_prev[0];
	end
	if (
		( RAMOut_expected_prev[1] !== 1'bx ) && ( RAMOut_prev[1] !== RAMOut_expected_prev[1] )
		&& ((RAMOut_expected_prev[1] !== last_RAMOut_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[1] = RAMOut_expected_prev[1];
	end
	if (
		( RAMOut_expected_prev[2] !== 1'bx ) && ( RAMOut_prev[2] !== RAMOut_expected_prev[2] )
		&& ((RAMOut_expected_prev[2] !== last_RAMOut_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[2] = RAMOut_expected_prev[2];
	end
	if (
		( RAMOut_expected_prev[3] !== 1'bx ) && ( RAMOut_prev[3] !== RAMOut_expected_prev[3] )
		&& ((RAMOut_expected_prev[3] !== last_RAMOut_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[3] = RAMOut_expected_prev[3];
	end
	if (
		( RAMOut_expected_prev[4] !== 1'bx ) && ( RAMOut_prev[4] !== RAMOut_expected_prev[4] )
		&& ((RAMOut_expected_prev[4] !== last_RAMOut_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[4] = RAMOut_expected_prev[4];
	end
	if (
		( RAMOut_expected_prev[5] !== 1'bx ) && ( RAMOut_prev[5] !== RAMOut_expected_prev[5] )
		&& ((RAMOut_expected_prev[5] !== last_RAMOut_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[5] = RAMOut_expected_prev[5];
	end
	if (
		( RAMOut_expected_prev[6] !== 1'bx ) && ( RAMOut_prev[6] !== RAMOut_expected_prev[6] )
		&& ((RAMOut_expected_prev[6] !== last_RAMOut_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[6] = RAMOut_expected_prev[6];
	end
	if (
		( RAMOut_expected_prev[7] !== 1'bx ) && ( RAMOut_prev[7] !== RAMOut_expected_prev[7] )
		&& ((RAMOut_expected_prev[7] !== last_RAMOut_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAMOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAMOut_expected_prev);
		$display ("     Real value = %b", RAMOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAMOut_exp[7] = RAMOut_expected_prev[7];
	end
	if (
		( RF_RPaddr_expected_prev[0] !== 1'bx ) && ( RF_RPaddr_prev[0] !== RF_RPaddr_expected_prev[0] )
		&& ((RF_RPaddr_expected_prev[0] !== last_RF_RPaddr_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_RPaddr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_RPaddr_expected_prev);
		$display ("     Real value = %b", RF_RPaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_RPaddr_exp[0] = RF_RPaddr_expected_prev[0];
	end
	if (
		( RF_RPaddr_expected_prev[1] !== 1'bx ) && ( RF_RPaddr_prev[1] !== RF_RPaddr_expected_prev[1] )
		&& ((RF_RPaddr_expected_prev[1] !== last_RF_RPaddr_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_RPaddr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_RPaddr_expected_prev);
		$display ("     Real value = %b", RF_RPaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_RPaddr_exp[1] = RF_RPaddr_expected_prev[1];
	end
	if (
		( RF_RPaddr_expected_prev[2] !== 1'bx ) && ( RF_RPaddr_prev[2] !== RF_RPaddr_expected_prev[2] )
		&& ((RF_RPaddr_expected_prev[2] !== last_RF_RPaddr_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_RPaddr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_RPaddr_expected_prev);
		$display ("     Real value = %b", RF_RPaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_RPaddr_exp[2] = RF_RPaddr_expected_prev[2];
	end
	if (
		( RF_RPaddr_expected_prev[3] !== 1'bx ) && ( RF_RPaddr_prev[3] !== RF_RPaddr_expected_prev[3] )
		&& ((RF_RPaddr_expected_prev[3] !== last_RF_RPaddr_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_RPaddr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_RPaddr_expected_prev);
		$display ("     Real value = %b", RF_RPaddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_RPaddr_exp[3] = RF_RPaddr_expected_prev[3];
	end
	if (
		( RF_Waddr_expected_prev[0] !== 1'bx ) && ( RF_Waddr_prev[0] !== RF_Waddr_expected_prev[0] )
		&& ((RF_Waddr_expected_prev[0] !== last_RF_Waddr_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Waddr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Waddr_expected_prev);
		$display ("     Real value = %b", RF_Waddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Waddr_exp[0] = RF_Waddr_expected_prev[0];
	end
	if (
		( RF_Waddr_expected_prev[1] !== 1'bx ) && ( RF_Waddr_prev[1] !== RF_Waddr_expected_prev[1] )
		&& ((RF_Waddr_expected_prev[1] !== last_RF_Waddr_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Waddr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Waddr_expected_prev);
		$display ("     Real value = %b", RF_Waddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Waddr_exp[1] = RF_Waddr_expected_prev[1];
	end
	if (
		( RF_Waddr_expected_prev[2] !== 1'bx ) && ( RF_Waddr_prev[2] !== RF_Waddr_expected_prev[2] )
		&& ((RF_Waddr_expected_prev[2] !== last_RF_Waddr_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Waddr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Waddr_expected_prev);
		$display ("     Real value = %b", RF_Waddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Waddr_exp[2] = RF_Waddr_expected_prev[2];
	end
	if (
		( RF_Waddr_expected_prev[3] !== 1'bx ) && ( RF_Waddr_prev[3] !== RF_Waddr_expected_prev[3] )
		&& ((RF_Waddr_expected_prev[3] !== last_RF_Waddr_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Waddr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Waddr_expected_prev);
		$display ("     Real value = %b", RF_Waddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Waddr_exp[3] = RF_Waddr_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [1:0] ALU_Sel;
wire [7:0] dataOut;
wire [15:0] I_data;
wire I_rd;
wire [3:0] RAM_addr;
wire RAM_en;
wire RAM_rw;
wire [7:0] RAMOut;
wire [3:0] RF_RPaddr;
wire [3:0] RF_Waddr;

wire sampler;                             

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.ALU_Sel(ALU_Sel),
	.clk(clk),
	.dataOut(dataOut),
	.I_data(I_data),
	.I_rd(I_rd),
	.RAM_addr(RAM_addr),
	.RAM_en(RAM_en),
	.RAM_rw(RAM_rw),
	.RAMOut(RAMOut),
	.reset(reset),
	.RF_RPaddr(RF_RPaddr),
	.RF_Waddr(RF_Waddr)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 

processador_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

processador_vlg_check_tst tb_out(
	.ALU_Sel(ALU_Sel),
	.dataOut(dataOut),
	.I_data(I_data),
	.I_rd(I_rd),
	.RAM_addr(RAM_addr),
	.RAM_en(RAM_en),
	.RAM_rw(RAM_rw),
	.RAMOut(RAMOut),
	.RF_RPaddr(RF_RPaddr),
	.RF_Waddr(RF_Waddr),
	.sampler_rx(sampler)
);
endmodule

